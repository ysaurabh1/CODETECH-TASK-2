CREATE DATABASE school;
USE school;



CREATE TABLE Students (
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    gender VARCHAR(10),
    dob DATE,
    email VARCHAR(100),
    phone VARCHAR(15),
    address VARCHAR(255)
);

CREATE TABLE Courses (
    course_id INT PRIMARY KEY AUTO_INCREMENT,
    course_name VARCHAR(100),
    course_code VARCHAR(10),
    course_description TEXT
);

CREATE TABLE Enrollments (
    enrollment_id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT,
    course_id INT,
    grade CHAR(2),
    enrollment_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Students
INSERT INTO Students (first_name, last_name, gender, dob, email, phone, address)
VALUES 
('Amit', 'Sharma', 'Male', '2000-05-10', 'amit.sharma@example.com', '1234567890', 'Mumbai'),
('Priya', 'Verma', 'Female', '2001-08-12', 'priya.verma@example.com', '2345678901', 'Delhi'),
('Raj', 'Kumar', 'Male', '2000-11-20', 'raj.kumar@example.com', '3456789012', 'Chennai'),
('Sanya', 'Gupta', 'Female', '1999-12-22', 'sanya.gupta@example.com', '4567890123', 'Bangalore'),
('Arjun', 'Singh', 'Male', '2001-04-30', 'arjun.singh@example.com', '5678901234', 'Jaipur'),
('Neha', 'Patel', 'Female', '2002-02-14', 'neha.patel@example.com', '6789012345', 'Ahmedabad'),
('Vikram', 'Reddy', 'Male', '2000-06-05', 'vikram.reddy@example.com', '7890123456', 'Hyderabad'),
('Simran', 'Bhatia', 'Female', '2001-09-19', 'simran.bhatia@example.com', '8901234567', 'Lucknow'),
('Rahul', 'Mehta', 'Male', '2000-01-23', 'rahul.mehta@example.com', '9012345678', 'Kolkata'),
('Ritika', 'Chopra', 'Female', '2001-07-25', 'ritika.chopra@example.com', '1023456789', 'Noida');

-- Courses
INSERT INTO Courses (course_name, course_code, course_description)
VALUES
('Data Structures', 'CS101', 'Introduction to Data Structures'),
('Algorithms', 'CS102', 'Design and Analysis of Algorithms'),
('Database Systems', 'CS103', 'Basics of Database Management Systems'),
('Operating Systems', 'CS104', 'Introduction to Operating Systems'),
('Computer Networks', 'CS105', 'Basics of Computer Networks'),
('Software Engineering', 'CS106', 'Fundamentals of Software Engineering'),
('Web Development', 'CS107', 'Introduction to Web Development'),
('Machine Learning', 'CS108', 'Basics of Machine Learning'),
('Artificial Intelligence', 'CS109', 'Introduction to AI'),
('Cyber Security', 'CS110', 'Introduction to Cyber Security');

-- Enrollments
INSERT INTO Enrollments (student_id, course_id, grade, enrollment_date)
VALUES
(1, 1, 'A', '2023-01-10'),
(1, 2, 'B', '2023-01-12'),
(2, 3, 'A', '2023-02-15'),
(2, 4, 'B+', '2023-02-18'),
(3, 1, 'A-', '2023-03-12'),
(3, 5, 'B', '2023-03-14'),
(4, 2, 'B+', '2023-04-05'),
(4, 6, 'A', '2023-04-07'),
(5, 7, 'A', '2023-05-01'),
(5, 8, 'B-', '2023-05-02'),
(6, 9, 'C+', '2023-06-10'),
(6, 10, 'B+', '2023-06-12'),
(7, 4, 'A+', '2023-07-14'),
(7, 5, 'A-', '2023-07-15'),
(8, 1, 'B', '2023-08-10'),
(8, 2, 'A', '2023-08-11'),
(9, 3, 'B-', '2023-09-01'),
(9, 6, 'A+', '2023-09-02'),
(10, 7, 'A-', '2023-10-01'),
(10, 8, 'B+', '2023-10-03'),
-- Adding 30 more entries similarly...
(1, 9, 'B', '2023-11-12'),
(2, 10, 'C', '2023-11-13'),
(3, 3, 'A-', '2023-12-20');

SELECT * FROM Students;

SELECT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Data Structures';

SELECT * FROM Courses;

SELECT grade FROM Enrollments WHERE student_id = 1;

SELECT s.first_name, s.last_name, e.grade
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Machine Learning';

SELECT c.course_name, COUNT(e.student_id) AS student_count
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;

SELECT DISTINCT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.grade = 'A';

SELECT c.course_name
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
JOIN Students s ON e.student_id = s.student_id
WHERE s.first_name = 'Amit' AND s.last_name = 'Sharma';

SELECT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
GROUP BY s.student_id
HAVING COUNT(e.course_id) > 3;

SELECT c.course_name, AVG(CASE 
                             WHEN e.grade = 'A' THEN 4
                             WHEN e.grade = 'B' THEN 3
                             WHEN e.grade = 'C' THEN 2
                             WHEN e.grade = 'D' THEN 1
                             ELSE 0 END) AS average_grade
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;

SELECT s.first_name, s.last_name, AVG(CASE 
                                       WHEN e.grade = 'A' THEN 4
                                       WHEN e.grade = 'B' THEN 3
                                       WHEN e.grade = 'C' THEN 2
                                       WHEN e.grade = 'D' THEN 1
                                       ELSE 0 END) AS avg_grade
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
GROUP BY s.student_id
ORDER BY avg_grade DESC
LIMIT 3;

SELECT c.course_name, COUNT(e.student_id) AS student_count
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name
ORDER BY student_count DESC
LIMIT 1;

SELECT s.first_name, s.last_name
FROM Students s
LEFT JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.student_id IS NULL;

SELECT c.course_name, MAX(CASE 
                            WHEN e.grade = 'A' THEN 4
                            WHEN e.grade = 'B' THEN 3
                            WHEN e.grade = 'C' THEN 2
                            WHEN e.grade = 'D' THEN 1
                            ELSE 0 END) AS highest_grade
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;

SELECT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e1 ON s.student_id = e1.student_id
JOIN Enrollments e2 ON s.student_id = e2.student_id
JOIN Courses c1 ON e1.course_id = c1.course_id
JOIN Courses c2 ON e2.course_id = c2.course_id
WHERE c1.course_name = 'Data Structures' AND c2.course_name = 'Algorithms';

